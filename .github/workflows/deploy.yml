name: Deploy to GCP

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r Flask-Api/api/requirements.txt

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        version: 'latest'
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Install Docker
      run: |
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        sudo apt-get update
        sudo apt-get install -y docker-ce

    - name: Authenticate Docker to Google Container Registry
      run: gcloud auth configure-docker

    - name: Authenticate with GCP
      run: |
        echo "${{ secrets.GCP_SA_KEY }}" | base64 --decode > /tmp/gcloud-key.json
        gcloud auth activate-service-account --key-file /tmp/gcloud-key.json
        gcloud auth application-default login --key-file=/tmp/gcloud-key.json

    - name: Build Docker image
      run: |
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/flask-api:latest .

    - name: Push Docker image to GCR
      run: |
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/flask-api:latest

    - name: Initialize Terraform
      run: |
        cd Flask-Api/terraform
        terraform init

    - name: Plan Terraform
      run: |
        cd Flask-Api/terraform
        terraform plan -var="project_id=${{ secrets.GCP_PROJECT_ID }}" -var="GCP_SA_KEY=${{ secrets.GCP_SA_KEY }}" -out=tfplan

    - name: Apply Terraform
      run: |
        cd Flask-Api/terraform
        terraform apply -auto-approve tfplan

    - name: Deploy to GKE
      run: |
        gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone ${GKE_ZONE} --project ${{ secrets.GCP_PROJECT_ID }}
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml

    - name: Retrieve External IP
      id: get-ip
      run: |
        external_ip=""
        while [ -z $external_ip ]; do
          echo "Waiting for external IP..."
          external_ip=$(kubectl get svc flask-api -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          [ -z "$external_ip" ] && sleep 10
        done
        echo "::set-output name=external_ip::$external_ip"

    - name: Verify API
      run: |
        external_ip=${{ steps.get-ip.outputs.external_ip }}
        curl http://$external_ip/time
